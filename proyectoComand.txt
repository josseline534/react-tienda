Paso 1:
    npm init -y

Paso 2:
    npm install react react-dom

Paso 3:
    3.1. Crear carpeta src
    3.2. Crear carpeta public

Paso 4:
    4.1. Crear archivo ./src/index.js
    4.2. Crear carpeta ./src/components/App.jsx
    4.3. Crear archivo ./public/index.html

Paso 5:
    5.1. index.js: importar react, reactDom, App,jsx
    5.2. index.js: realizar el render de App y elementById('app')

Paso 6:
    npm install webpack webpack-cli webpack-dev-server --save-dev
    npm install html-webpack-plugin html-loader --save-dev
    npm install babel-loader @babel/preset-env @babel/preset-react @babel/core --save-dev

Paso 7:
    7.1. Crear archivo ./webpack.config.js
    7.2. Hacer require de:
        const path = require('path')
        const HtmlWebpackPlugin = require('html-webpack-plugin')
    7.3. Exportar la configuración

Paso 8:
    8.1. Crear archivo ./.babelrc
    8.2. Crear configuracion para la compilacion de js y jsx

Paso 9:
    9.1. Agregar script en package.json
        /*compilación en desarrollo*/ "start": "webpack serve",
        /*compilación en producción*/ "build": "webpack --mode production"

Paso 10:
    /*CSS*/
    10.1. npm install css-loader mini-css-extract-plugin --save-dev
    10.2. Configuración en webpack.config.js
    10.3. Harcer require
    const MiniCssExtractPlugin = require('mini-css-extract-plugin')
    10.4. Crear archivo ./src/styles/component/app.css
    /*SASS*/
    10.1. npm install css-loader sass-loader mini-css-extract-plugin node-sass --save-dev
    10.2. Configuración en webpack.config.js
    10.3. Harcer require
    const MiniCssExtractPlugin = require('mini-css-extract-plugin')
    10.4. Crear archivo ./src/styles/component/app.sass
    /*LESS*/
    10.1. npm install css-loader less less-loader mini-css-extract-plugin  --save-dev
    10.2. Configuración en webpack.config.js
    10.3. Harcer require
    const MiniCssExtractPlugin = require('mini-css-extract-plugin')
    10.4. Crear archivo ./src/styles/component/app.less
    /*Stylus*/
    10.1. npm install css-loader stylus stylus-loader mini-css-extract-plugin  --save-dev
    10.2. Configuración en webpack.config.js
    10.3. Harcer require
    const MiniCssExtractPlugin = require('mini-css-extract-plugin')
    10.4. Crear archivo ./src/styles/component/app.styl

/*Opcional*/
Paso 11:
    11.1. npm install -g eslint
    11.2. npm install eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react
    11.3. Crear archivo de configuración ./.eslintrc
    11.4. npm install -g prettier
    11.5. npm install eslint-plugin-prettier eslint-config-prettier
    11.6. Crear archivo de configuración ./.prettierrc
    11.7. Archivo package.json añadir los script
    "format": "prettier --write '{*.js, src/**/*.{js, jsx}'",
    "lint": "eslint src/ --fix"

Paso 12:
    12.1. Crear carpeta ./src/routes
    12.2. npm install react-router-dom --save
    12.3. Crear archivo de configuración ./routes/App.jsx
    12.4. Import
        import React from 'react'
        import { BrowserRouter, Switch, Router, Route } from 'react-router-dom'
    12.5. Crear rutas
        <Route exact path="/" component={Home}/>
    12.6. Crear containers para las rutas
    12.7. import en el archivo ./src/index.js
        import App from './routes/App'
    12.8. Agregar en archivo webpack.config.js
        output - publicPath:'/'
        devServer - historyApiFallback:true

Paso 13:
    13.1. Crear componente Layaut.jsx que contendra toda la estructura
    13.2. Crear componentes y containers necesarios

Paso 14:
    14.1. Crear carpeta y archivo ./src/context/AppContext.js
    14.2. Crear carpeta y archivo ./src/hooks/useInitialState.js Incluira las funciones y logica
    14.3. Importar los 2 archivos en ./routes/App.jsx
    14.4. Agrupar en la etiqueta context.provider y enviar el hook

Paso 15:
    15.1. Integracion con paypal
    15.2. npm i react-paypal-button-v2 --save

Paso 16:
    desarrollo

Paso 17:
    17.1. Subir el proyecto a github
    17.2. Ingresar y crar proyecto en firebase
    17.3. Ingresar a hosting
    17.4. npm install -g firebase-tools
    17.5. firebase login
    17.6. firebase init
    17.7. Seleccionar Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys
    17.8. What do you want to use as your public directory? dist
    17.9. Configure as a single-page app (rewrite all urls to /index.html)? yes
    17.10.  Set up automatic builds and deploys with GitHub? no
    17.11. File dist/index.html already exists. Overwrite? no
    17.12. Subir los cambios a GitHub
    17.13. Crear archivo .github/workflows/deploy-to-firebase.yml
    17.14.